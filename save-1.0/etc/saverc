<!-- sample Save configuration file -->
<saverc>
    <!-- enable logging to syslog -->
    <syslog>
        <!-- syslog facility (default is user so this is not needed) -->
        <facility>user</facility>

        <!-- syslog priority (default is info so this is not needed) -->
        <priority>info</priority>
    </syslog>


    <!-- define peer hosts -->
    <peers>
        <host>host2.example.com</host>
    </peers>


    <!-- define SSH identities for users (must not have a passphrase) -->
    <keys>
        <!-- store root key in /etc/save/sshkey -->
        <root>/etc/save/sshkey</root>
    </keys>


    <!-- define settings for heartbeats -->
    <heartbeat>
        <!-- failover address -->
        <address>192.168.1.2</address>

        <!-- location on mon alert scripts -->
        <alertdir>/usr/local/lib/mon/alert.d</alertdir>

        <!-- device used for failover address -->
        <device>eth0</device>

        <!-- Mon group used for peer hosts -->
        <group>peer</group>

        <!-- location of heartbeat authenticator -->
        <key>/etc/save/savekey</key>

        <!-- location of mon monitor scripts -->
        <mondir>/usr/local/lib/mon/mon.d</mondir>

        <!-- network prefix of failover address -->
        <prefix>24</prefix>

        <!-- priority of this host in case of conflicts -->
        <priority>75</priority>

        <!-- location of mon state directory -->
        <statedir>/var/state/mon</statedir>
    </heartbeat>


    <!-- define archival actions -->
    <archive>
        <!-- sample RCS archival -->
        <rcs>ci -f -t-'Save archive' -m'Save archive' -u '$file'; rcs -U '$file'; chmod u+w '$file'</rcs>
    </archive>


    <!-- define synchronization actions -->
    <sync>
        <!-- sample rsync synchronization -->
        <rsync>rsync -e '$ssh' -goOprtv '$file' $host:'$dirname'</rsync>

        <!-- sample rsync synchronization (remote side) -->
        <remote-rsync>rsync --server -goOprtv . '$dirname'</remote-rsync>

        <!-- sample rsync synchronization with directory deletion -->
        <rsyncd>rsync -e '$ssh' -goOprtv --delete --include='$basename' --include='$basename/**' --exclude='*' . $host:'$dirname'</rsyncd>

        <!-- sample rsync synchronization with directory deletion (remote side) -->
        <remote-rsyncd>rsync --server -goOprtv --delete . '$dirname'</remote-rsyncd>
    </sync>


    <!-- define validation actions -->
    <validate>
        <!-- sample XML validator -->
        <xml>perl -MXML::Simple -e'XMLin("$file")'</xml>
    </validate>


    <!-- define actions for files -->
    <files>

        <!-- define one or more file elements -->
        <file>
            <!-- directory containing files that actions pertain to -->
            <directory>/etc</directory>

            <!-- name of file (if not defined, then all files in directory) -->
            <name>config.xml</name>

            <!-- actions executed before command -->
            <before>
            </before>

            <!-- actions executed after command -->
            <after>
                <!-- XML validation action -->
                <xml/>

                <!-- rsync synchronization action -->
                <rsync/>

                <!-- RCS archival action -->
                <rcs/>
            </after>
        </file>
    </files>
</saverc>

