Saverc Configuration
====================

The saverc file is located at /etc/saverc.  This file specifies various
configuration items including logging, peers, SSH keys, heartbeats, and
file actions.  For a sample template, see "etc/saverc".

1. Basic template

    The basic template for the saverc file is shown below.  Individual
    elements are described in the following sections.

        <saverc>
            <syslog>
                <!-- enable logging with optional facility and priority -->
            </syslog>

            <peers>
                <!-- hosts involved in failover and synchronization -->
                <host>
                    <!-- peer hostname or IP address -->
                </host>
                <!-- other host definitions -->
            </peers>

            <keys>
                <!-- SSH identities used for remote actions -->
                <user_name>
                    <!-- path to private key for user user_name -->
                </user_name>
                <!-- other key definitions -->
            </keys>

            <heartbeat>
                <!-- heartbeat configuration -->
            </heartbeat>

            <archive>
                <!-- archival actions -->
                <archive_action_name>
                    <!-- command to execute with options and arguments -->
                </archive_action_name>
                <!-- other archival action definitions -->
            </archive>

            <sync>
                <!-- synchronization actions -->
                <sync_action_name>
                    <!-- command to execute with options and arguments -->
                </sync_action_name>
                <!-- other synchronization action definitions -->
            </sync>

            <validate>
                <!-- validation actions -->
                <validate_action_name>
                    <!-- command to execute with options and arguments -->
                </validate_action_name>
                <!-- other validation action definitions -->
            </validate>

            <files>
                <!-- file/action relationships -->
                <file>
                    <!-- file location and associated actions -->
                </file>
                <!-- other file definitions -->
            </files>
        </saverc>


2. Logging

    Save supports syslog logging during Save alerts invoked by Mon.
    By default, syslogging is disabled.  It can be enabled by adding a
    "syslog" element:

        <syslog/>

    By default, messages will be generated to facility "user" with
    priority "info".  This can be changed by adding "facility" and
    "priority" elements.  For example:

        <syslog>
            <facility>local1</facility>
            <priority>debug</priority>
        </syslog>

    enables syslog to facility "local1" with priority "debug".


3. Peers

    The "peers" element defines the set of peer hosts involved in
    failover and synchronization with the current host.  Namely,
    heartbeats will be sent to all peers and synchronization actions
    will be performed across all peers.

        <peers>
            <!-- host definitions -->
        </peers>

    The host name or IP address of each peer is defined within a
    "host" element.  For example:

        <host>host2.example.com</host>

    specifies a peer with host name host2.example.com.


4. Keys

    The "keys" element specifies the SSH identity (i.e. private key)
    that should be used for any users performing actions across all
    peers.  This will typically only be the root user.

        <keys>
            <!-- user key locations -->
        </keys>

    The location of the private key for a given user is specified using
    an element corresponding to the user name.  For example:

        <root>/etc/save/sshkey</root>

    indicates that the location for the root user's private key is at
    /etc/save/sshkey.  Note that private keys cannot have a passphrase
    for correct operation and should only be readable by the invoking user.


5. Heartbeat configuration

    The "heartbeat" element defines various settings required for Save's
    heartbeat functionality to operate.

        <heartbeat>
            <!-- heartbeat configuration -->
        </heartbeat>

    5.1. Failover address configuration

        5.1.1. IP address

            The "address" element defines the IP address that will be
            used for failover between nodes.  For example:

                <address>192.168.1.2</address>

            would set the failover address to 192.168.1.2.

        5.1.2. Network interface

            The "device" element defines the network interface that the
            failover address should be added to.  For example:

                <device>eth0</device>

            would use the eth0 device for the failover address.

        5.1.3. Network prefix

            The "prefix" element defines the network prefix associated
            with the failover address.  For example:

                <prefix>24</prefix>

            would associate the failover address with a /24 network.

    5.2. Mon configuration

        5.2.1. Group

            The "group" element defines the Mon group (defined within
            the Mon configuration) that invokes the Save monitor.  For
            example:

                <group>peer</group>

            indicates that the "peer" group is used for the Save
            monitor.

        5.2.2. Alert directory

            The "alertdir" element defines where Mon alerts are stored.
            For example:

                <alertdir>/usr/local/lib/mon/alert.d</alertdir>

            indicates that alerts are stored in /usr/local/lib/mon/alert.d.

        5.2.3. Monitor directory

            The "mondir" element defines where Mon monitors are
            stored.  For example:

                <mondir>/usr/local/lib/mon/mon.d</mondir>

            indicates that monitors are stored in /usr/local/lib/mon/mon.d.

        5.2.4. State directory

            The "statedir" element defines where the Mon state directory
            is located.  For example:

                <statedir>/var/state/mon</statedir>

            indicates that the state directory is /var/state/mon.

    5.3. Other configuration

        5.3.1. Authentication key

            The "key" element defines a file that contains the heartbeat
            authenticator.  Note that this is not the same as the top
            level key element that stores the locations of user-specific
            SSH private keys.  The heartbeat authenticator is a separate
            file containing text used to construct a hash-based message
            authentication code (HMAC) digest.  HMAC digests ensure that
            heartbeats and associated control constructs have been sent
            from trusted peers.  For example:

                <key>/etc/save/savekey</key>

            indicates that the key is stored in the file
            /etc/save/savekey.  Note that this file should only be
            readable by root.

        5.3.2. Priority

            The "priority" element defines the priority of the current
            node, which is used to resolve conflicts when multiple nodes
            attempt to take over the failover address at the same time.
            For example:

                <priority>75</priority>

            would set the priority of the current node to 75.


6. Actions

    Save defines several special variables that may be referenced in
    actions.  The '$file' variable may be used to reference that file on
    which the action is to be executed.  The '$dirname' and '$basename'
    variables may be used to reference the parent directory and base
    name of the file, respectively.  The '$host' variable may be used to
    reference each peer host as it is processed.  Finally, the '$ssh'
    variable may be used to reference the SSH command-line that is 
    constructed for each remote command to a peer host.

    Actions must be designated as either validation, synchronization, or
    archival actions.  Validation actions are intended to check the
    syntax of files before they are copied to peer hosts.  They are
    processed first and are only executed on the local system.
    Synchronization actions are intended to synchronize the contents of
    files across nodes.  They are only processed if the corresponding
    validation actions are successful.  Finally, archival actions are
    intended to save current file state between synchronizations so that
    files may be restored if necessary.  They are only processed if the
    corresponding synchronization actions are successful.
    
    Note that, if desired, actions may encompass activities beyond
    validation, synchronization, and archival.  For other types of
    activities, keep in mind that the different types of actions are
    always performed in the same order, validation actions are only
    performed locally, and synchronization/archival actions are
    processed differently on the remote end as described below.

    6.1. Validation actions

        The "validate" element defines the set of validation actions
        that may be used in file "before" or "after" elements.  Action
        sub-elements may be named with any valid XML identifier and 
        define the associated command-line that will be executed for
        designated files.  For example:

            <validate>
                <xml>perl -MXML::Simple -e'XMLin("$file")'</xml>
            </validate>

        defines a single validation action named "xml" that uses Perl's
        XML::Simple module to check the syntax of XML files.

    6.2. Synchronization actions

        The "sync" element defines the set of synchronization actions
        that may be used in file "before" or "after" elements.  Action
        sub-elements may be named with any valid XML identifier and 
        define the associated command-line that will be executed for
        designated files.

        Each system involved in the synchronization may need to execute
        a different command depending on the program used to carry out
        the transfer.  Hence, each synchronization action must be
        defined in two parts.  For any synchronization action named
        "foo" that defines what is executed on the local system, a
        corresponding action "remote-foo" must be specified that
        defines what is executed on the remote system.  For example:

            <sync>
                <rsync>rsync -e '$ssh' -goOprtv '$file' $host:'$dirname'</rsync>
                <remote-rsync>rsync --server -goOprtv . '$dirname'</remote-rsync>
                <rsyncd>rsync -e '$ssh' -goOprtv --delete --include='$basename' --include='$basename/**' --exclude='*' . $host:'$dirname'</rsyncd>
                <remote-rsyncd>rsync --server -goOprtv --delete . '$dirname'</remote-rsyncd>
            </sync>

        defines two synchronization actions named "rsync" and
        "rsyncd".  The "rsync" action shows how the rsync program can be
        used to synchronize a single file between systems.  The "rsyncd"
        action shows how rsync can be used to synchronize a directory
        and its contents including the removal of the directory itself.

    6.3. Archival actions

        The "archive" element defines the set of archival actions that
        may be used in file "before" or "after" elements.  Action
        sub-elements may be named with any valid XML identifier and
        define the associated command-line that will be executed for
        designated files.  For example:

            <archive>
                <rcs>ci -f -t-'Save archive' -m'Save archive' -u '$file'; rcs -U '$file'; chmod u+w '$file'</rcs>
            </archive>

        defines a single archival action named "rcs" that shows how the
        RCS ci command can be used to keep a version-controlled history
        of a particular file.


7. Files

    The "files" element defines the set of files and/or directories
    and the individual actions associated with each.

        <files>
            <!-- set of file definitions -->
        </files>

    Each file is defined within a "file" element.

        <file>
            <!-- single file definition -->
        </file>

    7.1. Directory

        The "directory" element defines the location of the file or
        set of files to which actions pertain.  For example:

            <directory>/etc/config</directory>

        indicates that the files of interest reside in /etc/config.

    7.2. Name

        The "name" element defines an optional regular expression,
        that, when present, filters the set of files in the specified
        directory that will be processed.  For example:

            <name>foobar</name>

        indicates that the before and after actions should be applied
        to all files in the given directory that have "foobar" in their
        names.  Any Perl regular expression construct may be used in
        name definitions.  For example:
        
            <name>(?!foobar)</name>

        would indicate all files that do not have "foobar" in their
        names.

    7.3. Before actions

        The "before" element defines the validation, synchronization,
        and/or archival actions that will be executed before a command
        involving the designated file or set of files.  For example:

            <before>
                <log/>
            </before>

        would execute a hypothetical validation action called "log"
        that would log all access to a given set of files before they
        were modified by another program.  Note that in this case, a
        validation action was used for a general-purpose activity that
        should only be performed on the local host.

    7.4. After actions

        The "after" element defines the validation, synchronization,
        and/or archival actions that will be executed after a command
        modifying the designated file or set of files.  For example:

            <after>
                <xml/>
                <rsync/>
                <rcs/>
            </after>

        would indicate that the previously defined XML validation
        action, rsync synchronization action, and RCS archival action
        should be executed whenever the designated file or files have
        been modified.

